searchNodes=[{"doc":"This module provides an Erlang shell.The shell is a user interface program for entering expression sequences. The expressions are evaluated and a value is returned. A history mechanism saves previous commands and their values, which can then be incorporated in later commands. How many commands and results to save can be determined by the user, either interactively, by calling history/1 and results/1, or by setting the application configuration parameters shell_history_length and shell_saved_results for the STDLIB application.The shell uses a helper process for evaluating commands to protect the history mechanism from exceptions. By default the evaluator process is killed when an exception occurs, but by calling catch_exception/1 or by setting the application configuration parameter shell_catch_exception for the STDLIB application this behavior can be changed. See also the example below.Variable bindings, and local process dictionary changes that are generated in user expressions are preserved, and the variables can be used in later commands to access their values. The bindings can also be forgotten so the variables can be reused.The special shell commands all have the syntax of (local) function calls. They are evaluated as normal function calls and many commands can be used in one expression sequence.If a command (local function call) is not recognized by the shell, an attempt is first made to find the function in module user_default, where customized local commands can be placed. If found, the function is evaluated, otherwise an attempt is made to evaluate the function in module shell_default. Module user_default must be explicitly loaded.The shell also permits the user to start multiple concurrent jobs. A job can be regarded as a set of processes that can communicate with the shell.There is some support for reading and printing records in the shell. During compilation record expressions are translated to tuple expressions. In runtime it is not known whether a tuple represents a record, and the record definitions used by the compiler are unavailable at runtime. So, to read the record syntax and print tuples as records when possible, record definitions must be maintained by the shell itself.The shell commands for reading, defining, forgetting, listing, and printing records are described below. Notice that each job has its own set of record definitions. To facilitate matters, record definitions in modules shell_default and user_default (if loaded) are read each time a new job is started. For example, adding the following line to user_default makes the definition of file_info readily available in the shell:-include_lib(&quot;kernel/include/file.hrl&quot;).The shell runs in two modes:Normal (possibly restricted) mode, in which commands can be edited and expressions evaluatedJob Control Mode, JCL, in which jobs can be started, killed, detached, and connectedOnly the currently connected job can 'talk' to the shell.Shell CommandsThe commands below are the built-in shell commands that are always available. In most system the commands listed in the c(3) module are also available in the shell.b()Prints the current variable bindings.f()Removes all variable bindings.f(X)Removes the binding of variable X.h()Prints the history list.history(N)Sets the number of previous commands to keep in the history list to N. The previous number is returned. Defaults to 20.results(N)Sets the number of results from previous commands to keep in the history list to N. The previous number is returned. Defaults to 20.e(N)Repeats command N, if N is positive. If it is negative, the Nth previous command is repeated (that is, e(-1) repeats the previous command).v(N)Uses the return value of command N in the current command, if N is positive. If it is negative, the return value of the Nth previous command is used (that is, v(-1) uses the value of the previous command).help()Evaluates shell_default:help().c(Mod)Evaluates shell_default:c(Mod). This compiles and loads the module Mod and purges old versions of the code, if necessary. Mod can be either a module name or a a source file path, with or without .erl extension.catch_exception(Bool)Sets the exception handling of the evaluator process. The previous exception handling is returned. The default (false) is to kill the evaluator process when an exception occurs, which causes the shell to create a new evaluator process. When the exception handling is set to true, the evaluator process lives on. This means, for example, that ports and ETS tables as well as processes linked to the evaluator process survive the exception.rd(RecordName, RecordDefinition)Defines a record in the shell. RecordName is an atom and RecordDefinition lists the field names and the default values. Usually record definitions are made known to the shell by use of the rr/1,2,3 commands described below, but sometimes it is handy to define records on the fly.rf()Removes all record definitions, then reads record definitions from the modules shell_default and user_default (if loaded). Returns the names of the records defined.rf(RecordNames)Removes selected record definitions. RecordNames is a record name or a list of record names. To remove all record definitions, use '_'.rl()Prints all record definitions.rl(RecordNames)Prints selected record definitions. RecordNames is a record name or a list of record names.rp(Term)Prints a term using the record definitions known to the shell. All of Term is printed; the depth is not limited as is the case when a return value is printed.rr(Module)Reads record definitions from a module's BEAM file. If there are no record definitions in the BEAM file, the source file is located and read instead. Returns the names of the record definitions read. Module is an atom.rr(Wildcard)Reads record definitions from files. Existing definitions of any of the record names read are replaced. Wildcard is a wildcard string as defined in filelib(3), but not an atom.rr(WildcardOrModule, RecordNames)Reads record definitions from files but discards record names not mentioned in RecordNames (a record name or a list of record names).rr(WildcardOrModule, RecordNames, Options)Reads record definitions from files. The compiler options {i, Dir}, {d, Macro}, and {d, Macro, Value} are recognized and used for setting up the include path and macro definitions. To read all record definitions, use '_' as value of RecordNames.ExampleThe following example is a long dialog with the shell. Commands starting with &gt; are inputs to the shell. All other lines are output from the shell.strider 1&gt; erl Erlang (BEAM) emulator version 5.3 [hipe] [threads:0] Eshell V5.3 (abort with ^G) 1&gt; Str = &quot;abcd&quot;. &quot;abcd&quot;Command 1 sets variable Str to string &quot;abcd&quot;.2&gt; L = length(Str). 4Command 2 sets L to the length of string Str.3&gt; Descriptor = {L, list_to_atom(Str)}. {4,abcd}Command 3 builds the tuple Descriptor, evaluating the BIF list_to_atom/1 .4&gt; L. 4Command 4 prints the value of variable L.5&gt; b(). Descriptor = {4,abcd} L = 4 Str = &quot;abcd&quot; okCommand 5 evaluates the internal shell command b(), which is an abbreviation of &quot;bindings&quot;. This prints the current shell variables and their bindings. ok at the end is the return value of function b().6&gt; f(L). okCommand 6 evaluates the internal shell command f(L) (abbreviation of &quot;forget&quot;). The value of variable L is removed.7&gt; b(). Descriptor = {4,abcd} Str = &quot;abcd&quot; okCommand 7 prints the new bindings.8&gt; f(L). okCommand 8 has no effect, as L has no value.9&gt; {L, _} = Descriptor. {4,abcd}Command 9 performs a pattern matching operation on Descriptor, binding a new value to L.10&gt; L. 4Command 10 prints the current value of L.11&gt; {P, Q, R} = Descriptor. ** exception error: no match of right hand side value {4,abcd}Command 11 tries to match {P, Q, R} against Descriptor, which is {4, abc}. The match fails and none of the new variables become bound. The printout starting with &quot;** exception error:&quot; is not the value of the expression (the expression had no value because its evaluation failed), but a warning printed by the system to inform the user that an error has occurred. The values of the other variables (L, Str, and so on) are unchanged.12&gt; P. * 1:1: variable &#39;P&#39; is unbound 13&gt; Descriptor. {4,abcd}Commands 12 and 13 show that P is unbound because the previous command failed, and that Descriptor has not changed.14&gt;{P, Q} = Descriptor. {4,abcd} 15&gt; P. 4Commands 14 and 15 show a correct match where P and Q are bound.16&gt; f(). okCommand 16 clears all bindings.The next few commands assume that test1:demo(X) is defined as follows:demo(X) -&gt;    put(aa, worked),    X = 1,    X + 10.17&gt; put(aa, hello). undefined 18&gt; get(aa). helloCommands 17 and 18 set and inspect the value of item aa in the process dictionary.19&gt; Y = test1:demo(1). 11Command 19 evaluates test1:demo(1). The evaluation succeeds and the changes made in the process dictionary become visible to the shell. The new value of dictionary item aa can be seen in command 20.20&gt; get(). [{aa,worked}] 21&gt; put(aa, hello). worked 22&gt; Z = test1:demo(2). ** exception error: no match of right hand side value 1 in function test1:demo/1Commands 21 and 22 change the value of dictionary item aa to hello and call test1:demo(2). Evaluation fails and the changes made to the dictionary in test1:demo(2), before the error occurred, are discarded.23&gt; Z. * 1:1: variable &#39;Z&#39; is unbound 24&gt; get(aa). helloCommands 23 and 24 show that Z was not bound and that dictionary item aa has retained its original value.25&gt; erase(), put(aa, hello). undefined 26&gt; spawn(test1, demo, [1]). &lt;0.57.0&gt; 27&gt; get(aa). helloCommands 25, 26, and 27 show the effect of evaluating test1:demo(1) in the background. In this case, the expression is evaluated in a newly spawned process. Any changes made in the process dictionary are local to the newly spawned process and therefore not visible to the shell.28&gt; io:format(&quot;hello hello\\n&quot;). hello hello ok 29&gt; e(28). hello hello ok 30&gt; v(28). okCommands 28, 29 and 30 use the history facilities of the shell. Command 29 re-evaluates command 28. Command 30 uses the value (result) of command 28. In the cases of a pure function (a function with no side effects), the result is the same. For a function with side effects, the result can be different.The next few commands show some record manipulation. It is assumed that ex.erl defines a record as follows:-record(rec, {a, b = val()}).val() -&gt;    3.31&gt; c(ex). {ok,ex} 32&gt; rr(ex). [rec]Commands 31 and 32 compile file ex.erl and read the record definitions in ex.beam. If the compiler did not output any record definitions on the BEAM file, rr(ex) tries to read record definitions from the source file instead.33&gt; rl(rec). -record(rec,{a,b = val()}). okCommand 33 prints the definition of the record named rec.34&gt; #rec{}. ** exception error: undefined shell command val/0Command 34 tries to create a rec record, but fails as function val/0 is undefined.35&gt; #rec{b = 3}. #rec{a = undefined,b = 3}Command 35 shows the workaround: explicitly assign values to record fields that cannot otherwise be initialized.36&gt; rp(v(-1)). #rec{a = undefined,b = 3} okCommand 36 prints the newly created record using record definitions maintained by the shell.37&gt; rd(rec, {f = orddict:new()}). recCommand 37 defines a record directly in the shell. The definition replaces the one read from file ex.beam.38&gt; #rec{}. #rec{f = []} okCommand 38 creates a record using the new definition, and prints the result.39&gt; rd(rec, {c}), A. * 1:15: variable &#39;A&#39; is unbound 40&gt; #rec{}. #rec{c = undefined} okCommand 39 and 40 show that record definitions are updated as side effects. The evaluation of the command fails, but the definition of rec has been carried out.For the next command, it is assumed that test1:loop(N) is defined as follows:loop(N) -&gt;    io:format(&quot;Hello Number: ~w~n&quot;, [N]),    loop(N+1).41&gt; test1:loop(0). Hello Number: 0 Hello Number: 1 Hello Number: 2 Hello Number: 3 User switch command --&gt; i --&gt; c . . . Hello Number: 3374 Hello Number: 3375 Hello Number: 3376 Hello Number: 3377 Hello Number: 3378 ** exception exit: killedCommand 41 evaluates test1:loop(0), which puts the system into an infinite loop. At this point the user types ^G (Control G), which suspends output from the current process, which is stuck in a loop, and activates JCL mode. In JCL mode the user can start and stop jobs.In this particular case, command i (&quot;interrupt&quot;) terminates the looping program, and command c connects to the shell again. As the process was running in the background before we killed it, more printouts occur before message &quot;** exception exit: killed&quot; is shown.42&gt; E = ets:new(t, []). #Ref&lt;0.1662103692.2407923716.214192&gt;Command 42 creates an ETS table.43&gt; ets:insert({d,1,2}). ** exception error: undefined function ets:insert/1Command 43 tries to insert a tuple into the ETS table, but the first argument (the table) is missing. The exception kills the evaluator process.44&gt; ets:insert(E, {d,1,2}). ** exception error: argument is of wrong type in function ets:insert/2 called as ets:insert(16,{d,1,2})Command 44 corrects the mistake, but the ETS table has been destroyed as it was owned by the killed evaluator process.45&gt; f(E). ok 46&gt; catch_exception(true). falseCommand 46 sets the exception handling of the evaluator process to true. The exception handling can also be set when starting Erlang by erl -stdlib shell_catch_exception true.47&gt; E = ets:new(t, []). #Ref&lt;0.1662103692.2407923716.214197&gt; 48&gt; ets:insert({d,1,2}). * exception error: undefined function ets:insert/1Command 48 makes the same mistake as in command 43, but this time the evaluator process lives on. The single star at the beginning of the printout signals that the exception has been caught.49&gt; ets:insert(E, {d,1,2}). trueCommand 49 successfully inserts the tuple into the ETS table.50&gt; ets:insert(#Ref&lt;0.1662103692.2407923716.214197&gt;, {e,3,4}). trueCommand 50 inserts another tuple into the ETS table. This time the first argument is the table identifier itself. The shell can parse commands with pids (&lt;0.60.0&gt;), ports (#Port&lt;0.536&gt;), references (#Ref&lt;0.1662103692.2407792644.214210&gt;), and external functions (#Fun&lt;a.b.1&gt;), but the command fails unless the corresponding pid, port, reference, or function can be created in the running system.51&gt; halt(). strider 2&gt;Command 51 exits the Erlang runtime system.JCL ModeWhen the shell starts, it starts a single evaluator process. This process, together with any local processes that it spawns, is referred to as a job. Only the current job, which is said to be connected, can perform operations with standard I/O. All other jobs, which are said to be detached, are blocked if they attempt to use standard I/O.All jobs that do not use standard I/O run in the normal way.The shell escape key ^G (Control G) detaches the current job and activates JCL mode. The JCL mode prompt is &quot;--&gt;&quot;. If &quot;?&quot; is entered at the prompt, the following help message is displayed:--&gt; ? c [nn] - connect to job i [nn] - interrupt job k [nn] - kill job j - list all jobs s [shell] - start local shell r [node [shell]] - start remote shell q - quit erlang ? | h - this messageThe JCL commands have the following meaning:c [nn]Connects to job number &lt;nn&gt; or the current job. The standard shell is resumed. Operations that use standard I/O by the current job are interleaved with user inputs to the shell.i [nn]Stops the current evaluator process for job number nn or the current job, but does not kill the shell process. So, any variable bindings and the process dictionary are preserved and the job can be connected again. This command can be used to interrupt an endless loop.k [nn]Kills job number nn or the current job. All spawned processes in the job are killed, provided they have not evaluated the group_leader/1 BIF and are located on the local machine. Processes spawned on remote nodes are not killed.jLists all jobs. A list of all known jobs is printed. The current job name is prefixed with '*'.sStarts a new job. This is assigned the new index [nn], which can be used in references.s [shell]Starts a new job. This is assigned the new index [nn], which can be used in references. If optional argument shell is specified, it is assumed to be a module that implements an alternative shell.r [node]Starts a remote job on node. This is used in distributed Erlang to allow a shell running on one node to control a number of applications running on a network of nodes. If optional argument shell is specified, it is assumed to be a module that implements an alternative shell.qQuits Erlang. Notice that this option is disabled if Erlang is started with the ignore break, +Bi, system flag (which can be useful, for example when running a restricted shell, see the next section).?Displays the help message above.The behavior of shell escape can be changed by the STDLIB application variable shell_esc. The value of the variable can be either jcl (erl -stdlib shell_esc jcl) or abort (erl -stdlib shell_esc abort). The first option sets ^G to activate JCL mode (which is also default behavior). The latter sets ^G to terminate the current shell and start a new one. JCL mode cannot be invoked when shell_esc is set to abort.If you want an Erlang node to have a remote job active from the start (rather than the default local job), start Erlang with flag -remsh, for example, erl -remsh other_node@other_hostRestricted ShellThe shell can be started in a restricted mode. In this mode, the shell evaluates a function call only if allowed. This feature makes it possible to, for example, prevent a user from accidentally calling a function from the prompt that could harm a running system (useful in combination with system flag +Bi).When the restricted shell evaluates an expression and encounters a function call or an operator application, it calls a callback function (with information about the function call in question). This callback function returns true to let the shell go ahead with the evaluation, or false to abort it. There are two possible callback functions for the user to implement:local_allowed(Func, ArgList, State) -&gt; {boolean(),NewState}This is used to determine if the call to the local function Func with arguments ArgList is to be allowed.non_local_allowed(FuncSpec, ArgList, State) -&gt; {boolean(),NewState} | {{redirect,NewFuncSpec,NewArgList},NewState}This is used to determine if the call to non-local function FuncSpec ({Module,Func} or a fun) with arguments ArgList is to be allowed. The return value {redirect,NewFuncSpec,NewArgList} can be used to let the shell evaluate some other function than the one specified by FuncSpec and ArgList.These callback functions are called from local and non-local evaluation function handlers, described in the erl_eval manual page. (Arguments in ArgList are evaluated before the callback functions are called.)Argument State is a tuple {ShellState,ExprState}. The return value NewState has the same form. This can be used to carry a state between calls to the callback functions. Data saved in ShellState lives through an entire shell session. Data saved in ExprState lives only through the evaluation of the current expression.There are two ways to start a restricted shell session:Use STDLIB application variable restricted_shell and specify, as its value, the name of the callback module. Example (with callback functions implemented in callback_mod.erl): $ erl -stdlib restricted_shell callback_mod.From a normal shell session, call function start_restricted/1. This exits the current evaluator and starts a new one in restricted mode.Notes:When restricted shell mode is activated or deactivated, new jobs started on the node run in restricted or normal mode, respectively.If restricted mode has been enabled on a particular node, remote shells connecting to this node also run in restricted mode.The callback functions cannot be used to allow or disallow execution of functions called from compiled code (only functions called from expressions entered at the shell prompt).Errors when loading the callback module is handled in different ways depending on how the restricted shell is activated:If the restricted shell is activated by setting the STDLIB variable during emulator startup, and the callback module cannot be loaded, a default restricted shell allowing only the commands q() and init:stop() is used as fallback.If the restricted shell is activated using start_restricted/1 and the callback module cannot be loaded, an error report is sent to the error logger and the call returns {error,Reason}.PromptingThe default shell prompt function displays the name of the node (if the node can be part of a distributed system) and the current command number. The user can customize the prompt function by calling prompt_func/1 or by setting application configuration parameter shell_prompt_func for the STDLIB application.A customized prompt function is stated as a tuple {Mod, Func}. The function is called as Mod:Func(L), where L is a list of key-value pairs created by the shell. Currently there is only one pair: {history, N}, where N is the current command number. The function is to return a list of characters or an atom. This constraint is because of the Erlang I/O protocol. Unicode characters beyond code point 255 are allowed in the list and the atom. Notice that in restricted mode the call Mod:Func(L) must be allowed or the default shell prompt function is called.","ref":"shell.html","title":"shell","type":"module"},{"doc":"Bool = boolean()Sets the exception handling of the evaluator process. The previous exception handling is returned. The default (false) is to kill the evaluator process when an exception occurs, which causes the shell to create a new evaluator process. When the exception handling is set to true, the evaluator process lives on, which means that, for example, ports and ETS tables as well as processes linked to the evaluator process survive the exception.","ref":"shell.html#catch_exception/1","title":"shell.catch_exception/1","type":"function"},{"doc":"Sets the number of previous commands to keep in the history list to N. The previous number is returned. Defaults to 20.","ref":"shell.html#history/1","title":"shell.history/1","type":"function"},{"doc":"Sets the shell prompt function to PromptFunc. The previous prompt function is returned.","ref":"shell.html#prompt_func/1","title":"shell.prompt_func/1","type":"function"},{"doc":"Sets the number of results from previous commands to keep in the history list to N. The previous number is returned. Defaults to 20.","ref":"shell.html#results/1","title":"shell.results/1","type":"function"},{"doc":"Exits a normal shell and starts a restricted shell. Module specifies the callback module for the functions local_allowed/3 and non_local_allowed/3. The function is meant to be called from the shell.If the callback module cannot be loaded, an error tuple is returned. The Reason in the error tuple is the one returned by the code loader when trying to load the code of the callback module.","ref":"shell.html#start_restricted/1","title":"shell.start_restricted/1","type":"function"},{"doc":"Exits a restricted shell and starts a normal shell. The function is meant to be called from the shell.","ref":"shell.html#stop_restricted/0","title":"shell.stop_restricted/0","type":"function"},{"doc":"Sets pretty printing of lists to Strings. The previous value of the flag is returned.The flag can also be set by the STDLIB application variable shell_strings. Defaults to true, which means that lists of integers are printed using the string syntax, when possible. Value false means that no lists are printed using the string syntax.","ref":"shell.html#strings/1","title":"shell.strings/1","type":"function"},{"doc":"The functions in this module are called when no module name is specified in a shell command.Consider the following shell dialog:1&gt; lists:reverse(&quot;abc&quot;). &quot;cba&quot; 2&gt; c(foo). {ok, foo}In command one, module lists is called. In command two, no module name is specified. The shell searches module user_default followed by module shell_default for function c/1.shell_default is intended for &quot;system wide&quot; customizations to the shell. user_default is intended for &quot;local&quot; or individual user customizations.HintTo add your own commands to the shell, create a module called user_default and add the commands you want. Then add the following line as the first line in your .erlang file in your home directory.code:load_abs(&quot;$PATH/user_default&quot;).$PATH is the directory where your user_default module can be found.","ref":"shell_default.html","title":"shell_default","type":"module"},{"doc":"This module can be used to render function and type documentation to be printed in a shell. This is the module that is used to render the docs accessed through the shell through c:h/1,2,3. Example:1&gt; h(maps,new,0). -spec new() -&gt; Map when Map :: \#{}. Since: OTP 17.0 Returns a new empty map. Example: &gt; maps:new(). \#{}This module formats and renders EEP-48 documentation of the format application/erlang+html. For more information about this format see Documentation Storage in Erl_Docgen's User's Guide. It can also render any other format of &quot;text&quot; type, although those will be rendered as is.","ref":"shell_docs.html","title":"shell_docs","type":"module"},{"doc":"This function can be used to do whitespace normalization of application/erlang+html documentation.","ref":"shell_docs.html#normalize/1","title":"shell_docs.normalize/1","type":"function"},{"doc":"Render the documentation for a module or function.","ref":"shell_docs.html#render/2","title":"shell_docs.render/2","type":"function"},{"doc":"","ref":"shell_docs.html#render/3","title":"shell_docs.render/3","type":"function"},{"doc":"","ref":"shell_docs.html#render/4","title":"shell_docs.render/4","type":"function"},{"doc":"","ref":"shell_docs.html#render/5","title":"shell_docs.render/5","type":"function"},{"doc":"Render the documentation of a callback in a module.","ref":"shell_docs.html#render_callback/2","title":"shell_docs.render_callback/2","type":"function"},{"doc":"","ref":"shell_docs.html#render_callback/3","title":"shell_docs.render_callback/3","type":"function"},{"doc":"","ref":"shell_docs.html#render_callback/4","title":"shell_docs.render_callback/4","type":"function"},{"doc":"","ref":"shell_docs.html#render_callback/5","title":"shell_docs.render_callback/5","type":"function"},{"doc":"Render the documentation of a type in a module.","ref":"shell_docs.html#render_type/2","title":"shell_docs.render_type/2","type":"function"},{"doc":"","ref":"shell_docs.html#render_type/3","title":"shell_docs.render_type/3","type":"function"},{"doc":"","ref":"shell_docs.html#render_type/4","title":"shell_docs.render_type/4","type":"function"},{"doc":"","ref":"shell_docs.html#render_type/5","title":"shell_docs.render_type/5","type":"function"},{"doc":"This function can be used to find out which tags are supported by application/erlang+html documentation.","ref":"shell_docs.html#supported_tags/0","title":"shell_docs.supported_tags/0","type":"function"},{"doc":"This function can be used to do a basic validation of the doc content of application/erlang+html format.","ref":"shell_docs.html#validate/1","title":"shell_docs.validate/1","type":"function"},{"doc":"","ref":"shell_docs.html#t:chunk_element/0","title":"shell_docs.chunk_element/0","type":"type"},{"doc":"","ref":"shell_docs.html#t:chunk_element_attr/0","title":"shell_docs.chunk_element_attr/0","type":"type"},{"doc":"","ref":"shell_docs.html#t:chunk_element_attrs/0","title":"shell_docs.chunk_element_attrs/0","type":"type"},{"doc":"The HTML tags allowed in application/erlang+html.","ref":"shell_docs.html#t:chunk_element_block_type/0","title":"shell_docs.chunk_element_block_type/0","type":"type"},{"doc":"The HTML tags allowed in application/erlang+html.","ref":"shell_docs.html#t:chunk_element_inline_type/0","title":"shell_docs.chunk_element_inline_type/0","type":"type"},{"doc":"The HTML tags allowed in application/erlang+html.","ref":"shell_docs.html#t:chunk_element_type/0","title":"shell_docs.chunk_element_type/0","type":"type"},{"doc":"","ref":"shell_docs.html#t:chunk_elements/0","title":"shell_docs.chunk_elements/0","type":"type"},{"doc":"The configuration of how the documentation should be rendered.encodingConfigure the encoding that should be used by the renderer for graphical details such as bullet-points. By default shell_docs uses the value returned by io:getopts().ansiConfigure whether ansi escape codes should be used to render graphical details such as bold and underscore. By default shell_docs will try to determine if the receiving shell supports ansi escape codes. It is possible to override the automated check by setting the kernel configuration parameter shell_docs_ansi to a boolean() value.columnsConfigure how wide the target documentation should be rendered. By default shell_docs used the value returned by io:columns().","ref":"shell_docs.html#t:config/0","title":"shell_docs.config/0","type":"type"},{"doc":"The record holding EEP-48 documentation for a module. You can use code:get_doc/1 to fetch this information from a module.","ref":"shell_docs.html#t:docs_v1/0","title":"shell_docs.docs_v1/0","type":"type"}]